
Sensor324.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000723  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064a  00000000  00000000  0000099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  000016ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5d 00 	call	0xba	; 0xba <main>
  88:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <enable_pcint>:

volatile uint8_t pulses = 0;
volatile uint16_t ticks = 0;

void enable_pcint(void){
	PCICR |= (1<<PCIE1); // turn on Pin Change Interrupt Control Register 1 (PORTC)
  90:	e8 e6       	ldi	r30, 0x68	; 104
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8); // enable the mask on PORTC0
  9a:	ec e6       	ldi	r30, 0x6C	; 108
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <enable_timer>:
}

void enable_timer(void){
	/* Generating interrupt every 1ms */
	TCCR0A = (1<<WGM01); // CTC Mode, Normal Port Operation
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00); // Clock Prescaler /64
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0; // set timer value to 0
  ae:	16 bc       	out	0x26, r1	; 38
	OCR0A = 125; // set the output compare register to flag at 125
  b0:	9d e7       	ldi	r25, 0x7D	; 125
  b2:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A); // enable the output compare match A interrupt
  b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
	/* Set PORTB to be output */
	DDRB = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  be:	15 b8       	out	0x05, r1	; 5
	/* Set PORTC as input and enable pull up resistor */
	DDRC = (0<<PORTC0);
  c0:	17 b8       	out	0x07, r1	; 7
	PORTC = (1<<PORTC0);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	88 b9       	out	0x08, r24	; 8
	DDRD = (1<<PORTD2);
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	8a b9       	out	0x0a, r24	; 10
	
	enable_pcint();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <enable_pcint>
	enable_timer();
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_timer>
	
	sei(); // enable interrupts
  d2:	78 94       	sei
    {
		if(ticks >= 1000){
			PORTB = pulses;
			pulses = 0;
			ticks = 0;
			PORTD = ~(PORTD && 0b100) && 0b100;
  d4:	21 e0       	ldi	r18, 0x01	; 1
	enable_timer();
	
	sei(); // enable interrupts
    while (1) 
    {
		if(ticks >= 1000){
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  de:	88 3e       	cpi	r24, 0xE8	; 232
  e0:	93 40       	sbci	r25, 0x03	; 3
  e2:	c8 f3       	brcs	.-14     	; 0xd6 <main+0x1c>
			PORTB = pulses;
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pulses>
  e8:	85 b9       	out	0x05, r24	; 5
			pulses = 0;
  ea:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pulses>
			ticks = 0;
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTD = ~(PORTD && 0b100) && 0b100;
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	2b b9       	out	0x0b, r18	; 11
  fa:	ed cf       	rjmp	.-38     	; 0xd6 <main+0x1c>

000000fc <__vector_4>:
		}
    }
}

ISR(PCINT1_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
	if(!(PINC & (1<<PORTC0))){
 108:	30 99       	sbic	0x06, 0	; 6
 10a:	05 c0       	rjmp	.+10     	; 0x116 <__vector_4+0x1a>
		/* detect falling edge */
		pulses++;
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pulses>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulses>
	}
}
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
	ticks++;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
